"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[97302],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),c=a,k=u["".concat(d,".").concat(c)]||u[c]||m[c]||o;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},91680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var r=n(87462),a=(n(67294),n(3905)),o=n(61054),i=n(78013);const l={id:"useDrawerForm",title:"useDrawerForm"},d=void 0,s={unversionedId:"api-reference/antd/hooks/form/useDrawerForm",id:"api-reference/antd/hooks/form/useDrawerForm",title:"useDrawerForm",description:"useDrawerForm hook allows you to manage a form within a Drawer. It returns Ant Design Form and Drawer components props.",source:"@site/docs/api-reference/antd/hooks/form/useDrawerForm.md",sourceDirName:"api-reference/antd/hooks/form",slug:"/api-reference/antd/hooks/form/useDrawerForm",permalink:"/docs/api-reference/antd/hooks/form/useDrawerForm",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/form/useDrawerForm.md",tags:[],version:"current",lastUpdatedBy:"\xd6mer Faruk APLAK",lastUpdatedAt:1666175240,formattedLastUpdatedAt:"Oct 19, 2022",frontMatter:{id:"useDrawerForm",title:"useDrawerForm"},sidebar:"someSidebar",previous:{title:"useSelect",permalink:"/docs/api-reference/antd/hooks/field/useSelect"},next:{title:"useForm",permalink:"/docs/api-reference/antd/hooks/form/useForm"}},p={},m=[{value:"Usage",id:"usage",level:2},{value:"Create Drawer",id:"create-drawer",level:3},{value:"Edit Drawer",id:"edit-drawer",level:3},{value:"API Parameters",id:"api-parameters",level:2},{value:"Properties",id:"properties",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Live StackBlitz Example",id:"live-stackblitz-example",level:2}],u=(c="PropsTable",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var c;const k={toc:m};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm")," hook allows you to manage a form within a Drawer. It returns Ant Design ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/form/"},"Form")," and ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/drawer/"},"Drawer")," components props."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useDrawerForm } from "@pankod/refine-antd";\n\nconst { drawerProps, formProps } = useDrawerForm<IPost>({\n    action: "create", // or "edit"\n});\n')),(0,a.kt)("p",null,"All we have to do is to pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"drawerProps")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"formProps")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form>")," components."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"We'll do two examples, one for creating and one for editing a post. Let's see how ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm")," is used in both."),(0,a.kt)("h3",{id:"create-drawer"},"Create Drawer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/list.tsx"',title:'"pages/posts/list.tsx"'},'import { useDrawerForm, Drawer, Form, Create, Radio, List, Input } from "@pankod/refine-antd";\n\nexport const PostList: React.FC = () => {\n// highlight-start\n    const {\n        formProps,\n        drawerProps,\n        show,\n        saveButtonProps,\n    } = useDrawerForm<IPost>({\n        action: "create",\n    });\n// highlight-end\n\n    return (\n        <>\n            <List\n// highlight-start\n                createButtonProps={{\n                    onClick: () => {\n                        show();\n                    },\n                }}\n// highlight-end\n            >\n                ...\n            </List>\n// highlight-start\n            <Drawer {...drawerProps}>\n                <Create saveButtonProps={saveButtonProps}>\n                    <Form {...formProps} layout="vertical">\n                        <Form.Item label="Title" name="title">\n                            <Input />\n                        </Form.Item>\n                        <Form.Item label="Status" name="status">\n                            <Radio.Group>\n                                <Radio value="draft">Draft</Radio>\n                                <Radio value="published">Published</Radio>\n                                <Radio value="rejected">Rejected</Radio>\n                            </Radio.Group>\n                        </Form.Item>\n                    </Form>\n                </Create>\n            </Drawer>\n// highlight-end\n        </>\n    )\n}\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"createButtonProps")," allows us to create and manage a button above the table."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"    createButtonProps={{\n        onClick: () => {\n            show();\n        },\n    }}\n")),(0,a.kt)("p",null,"This code block makes ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," appear when you click the button."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"saveButtonProps")," allows us to manage the save button in the drawer."),(0,a.kt)("div",{class:"img-container"},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:o.Z,alt:"Create record action"})),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"edit-drawer"},"Edit Drawer"),(0,a.kt)("p",null,"Let's learn how to add editing capabilities to the records that will be opening form in Drawer with using ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/list.tsx"',title:'"pages/posts/list.tsx"'},'import {\n    useDrawerForm,\n    Drawer,\n    Form,\n    Create,\n    Radio,\n    List,\n    Edit,\n    Table,\n    EditButton,\n    Input\n} from "@pankod/refine-antd";\n\nexport const PostList: React.FC = () => {\n    const {\n        drawerProps,\n        formProps,\n        show,\n        saveButtonProps,\n        deleteButtonProps,\n        id,\n    } = useDrawerForm<IPost>({\n// highlight-next-line\n        action: "edit",\n    });\n\n    return (\n        <>\n            <List>\n                <Table>\n                    ...\n                    <Table.Column<IPost>\n                        title="Actions"\n                        dataIndex="actions"\n                        key="actions"\n// highlight-start\n                        render={(_value, record) => (\n                            <EditButton\n                                size="small"\n                                recordItemId={record.id}\n                                onClick={() => show(record.id)}\n                            />\n                        )}\n// highlight-end\n                    />\n                </Table>\n            </List>\n            <Drawer {...drawerProps}>\n                <Edit\n// highlight-start\n                    saveButtonProps={saveButtonProps}\n                    deleteButtonProps={deleteButtonProps}\n                    recordItemId={id}\n// highlight-end\n                >\n// highlight-next-line\n                    <Form {...formProps} layout="vertical">\n                        <Form.Item label="Title" name="title">\n                            <Input />\n                        </Form.Item>\n                        <Form.Item label="Status" name="status">\n                            <Radio.Group>\n                                <Radio value="draft">Draft</Radio>\n                                <Radio value="published">Published</Radio>\n                                <Radio value="rejected">Rejected</Radio>\n                            </Radio.Group>\n                        </Form.Item>\n                    </Form>\n                </Edit>\n            </Drawer>\n        </>\n    )\n}\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n')),(0,a.kt)("p",null,":::important\nrefine doesn't automatically add a edit button to the each record in ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens edit form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," when clicking."),(0,a.kt)("p",null,"So, we have to put the edit buttons on our list. In that way, ",(0,a.kt)("inlineCode",{parentName:"p"},"<Edit>")," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," can fetch data by the record ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column<IPost>\n    title="Actions"\n    dataIndex="actions"\n    key="actions"\n    render={(_value, record) => (\n        <EditButton\n            size="small"\n            recordItemId={record.id}\n            onClick={() => show(record.id)}\n        />\n    )}\n/>\n')),(0,a.kt)("p",null,":::"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"saveButtonProps")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"deleteButtonProps")," gives us the ability of saving and deleting buttons in the drawer."),(0,a.kt)("div",{class:"img-container"},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:i.Z,alt:"Edit record action"})),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"api-parameters"},"API Parameters"),(0,a.kt)("h3",{id:"properties"},"Properties"),(0,a.kt)(u,{module:"@pankod/refine-antd/useDrawerForm",mdxType:"PropsTable"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"*"),": These props have default values in ",(0,a.kt)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on ",(0,a.kt)("strong",{parentName:"p"},"<",(0,a.kt)("a",{parentName:"strong",href:"/docs/api-reference/core/components/refine-config"},"Refine"),">")," component. ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm")," will use what is passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine>")," as default but a local value will override it.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"**"),": If not explicitly configured, default value of ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect")," depends which ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," used. If ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," (created resources edit page). Otherwise if ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"edit"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),".")),(0,a.kt)("h3",{id:"return-value"},"Return Value"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Key"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"show"),(0,a.kt)("td",{parentName:"tr",align:null},"A function that opens the drawer"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(id?: BaseKey) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"formProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design form props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#Form"},(0,a.kt)("inlineCode",{parentName:"a"},"FormProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"drawerProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Props for managed drawer"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/drawer/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"DrawerProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"saveButtonProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Props for a submit button"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ disabled: boolean; onClick: () => void; loading: boolean; }"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"deleteButtonProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Adds props for delete button"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#delete-button-props"},(0,a.kt)("inlineCode",{parentName:"a"},"DeleteButtonProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"formLoading"),(0,a.kt)("td",{parentName:"tr",align:null},"Loading status of form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"submit"),(0,a.kt)("td",{parentName:"tr",align:null},"Submit method, the parameter is the value of the form fields"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"visible"),(0,a.kt)("td",{parentName:"tr",align:null},"Whether the drawer is visible or not"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"close"),(0,a.kt)("td",{parentName:"tr",align:null},"Specify a function that can close the drawer"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"defaultFormValuesLoading"),(0,a.kt)("td",{parentName:"tr",align:null},"DefaultFormValues loading status of form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"form"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design form instance"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#FormInstance"},(0,a.kt)("inlineCode",{parentName:"a"},"FormInstance<TVariables>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"id"),(0,a.kt)("td",{parentName:"tr",align:null},"Record id for edit action"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"setId"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"id")," setter"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Dispatch<SetStateAction<")," ",(0,a.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined>>"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"queryResult"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,a.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"mutationResult"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the mutation triggered by submitting the form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useMutation"},(0,a.kt)("inlineCode",{parentName:"a"},"UseMutationResult<"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"a"},"{ data: TData },"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"a"},"TError,"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"a"}," { resource: string; values: TVariables; },"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"a"}," unknown>")))))),(0,a.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Desription"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data of the query that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TVariables"),(0,a.kt)("td",{parentName:"tr",align:null},"Values for params."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,a.kt)("h2",{id:"live-stackblitz-example"},"Live StackBlitz Example"),(0,a.kt)("iframe",{loading:"lazy",src:"https://stackblitz.com/github/refinedev/refine/tree/master/examples/form/antd/useDrawerForm?embed=1&view=preview&theme=dark&preset=node&ctl=1",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"refine-use-drawer-form-example",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}f.isMDXComponent=!0},61054:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/create-0293527d2dbc34b685231d8587dbba4c.gif"},78013:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/edit-e98232dbd9cf8c5c8ba1ffb62c7bd413.gif"}}]);