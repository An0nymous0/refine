"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[96496],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),f=i,h=m["".concat(l,".").concat(f)]||m[f]||d[f]||a;return t?r.createElement(h,o(o({ref:n},p),{},{components:t})):r.createElement(h,o({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},27388:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(87462),i=t(67294),a=t(3905);const o={id:"inferencer",title:"Inferencer"},s=void 0,l={unversionedId:"api-reference/mantine/components/inferencer",id:"api-reference/mantine/components/inferencer",title:"Inferencer",description:"You can automatically generate views for your resources using @pankod/refine-inferencer. Inferencer exports MantineListInferencer, MantineShowInferencer, MantineCreateInferencer and MantineEditInferencer components.",source:"@site/docs/api-reference/mantine/components/inferencer.md",sourceDirName:"api-reference/mantine/components",slug:"/api-reference/mantine/components/inferencer",permalink:"/docs/api-reference/mantine/components/inferencer",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/mantine/components/inferencer.md",tags:[],version:"current",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1669356966,formattedLastUpdatedAt:"Nov 25, 2022",frontMatter:{id:"inferencer",title:"Inferencer"},sidebar:"someSidebar",previous:{title:"<AuthPage>",permalink:"/docs/api-reference/mantine/components/mantine-auth-page"},next:{title:"Create",permalink:"/docs/api-reference/mantine/components/basic-views/create"}},c={},p=[{value:"Usage",id:"usage",level:2},{value:"Views",id:"views",level:2},{value:"<code>MantineListInferencer</code>",id:"mantinelistinferencer",level:3},{value:"<code>MantineShowInferencer</code>",id:"mantineshowinferencer",level:3},{value:"<code>MantineCreateInferencer</code>",id:"mantinecreateinferencer",level:3},{value:"<code>MantineEditInferencer</code>",id:"mantineeditinferencer",level:3},{value:"Live StackBlitz Example",id:"live-stackblitz-example",level:2}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},m=d("Tabs"),f=d("TabItem"),h={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can automatically generate views for your resources using ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-inferencer"),". Inferencer exports ",(0,a.kt)("inlineCode",{parentName:"p"},"MantineListInferencer"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"MantineShowInferencer"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"MantineCreateInferencer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MantineEditInferencer")," components."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Mantine components can be imported from ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-inferencer/mantine"),". You can directly use the components in ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," prop of ",(0,a.kt)("inlineCode",{parentName:"p"},"Refine")," component or you can use them in your custom components by passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," prop as the resource name."),(0,a.kt)(m,{defaultValue:"resources",values:[{label:(0,a.kt)(i.Fragment,null,"In",(0,a.kt)("code",{style:{margin:"0 0.7ch"}},"resources"),"prop"),value:"resources"},{label:"In Custom Components",value:"custom"}],mdxType:"Tabs"},(0,a.kt)(f,{value:"resources",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n    Layout,\n    MantineProvider,\n    LightTheme,\n    Global,\n} from "@pankod/refine-mantine";\n// highlight-start\nimport {\n    MantineListInferencer,\n    MantineShowInferencer,\n    MantineCreateInferencer,\n    MantineEditInferencer,\n} from "@pankod/refine-inferencer/mantine";\n// highlight-end\n\nconst App = () => {\n    return (\n        <MantineProvider theme={LightTheme} withNormalizeCSS withGlobalStyles>\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                resources={[\n                    {\n                        name: "samples",\n                        // highlight-start\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                        create: MantineCreateInferencer,\n                        edit: MantineEditInferencer,\n                        // highlight-end\n                    },\n                ]}\n            />\n        </MantineProvider>\n    );\n};\n'))),(0,a.kt)(f,{value:"custom",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'// highlight-start\nimport {\n    MantineListInferencer,\n    MantineShowInferencer,\n    MantineCreateInferencer,\n    MantineEditInferencer,\n} from "@pankod/refine-inferencer/mantine";\n// highlight-end\n\nconst SampleList = () => {\n    return (\n        // highlight-next-line\n        <MantineListInferencer resource="samples" />\n    );\n};\n\nconst SampleShow = () => {\n    return (\n        // highlight-next-line\n        <MantineShowInferencer resource="samples" />\n    );\n};\n\nconst SampleCreate = () => {\n    return (\n        // highlight-next-line\n        <MantineCreateInferencer resource="samples" />\n    );\n};\n\nconst SampleEdit = () => {\n    return (\n        // highlight-next-line\n        <MantineEditInferencer resource="samples" />\n    );\n};\n')))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"To learn more about ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-inferencer")," package, please check out ",(0,a.kt)("a",{parentName:"p",href:"/docs/packages/documentation/inferencer"},"Docs"))),(0,a.kt)("h2",{id:"views"},"Views"),(0,a.kt)("h3",{id:"mantinelistinferencer"},(0,a.kt)("inlineCode",{parentName:"h3"},"MantineListInferencer")),(0,a.kt)("p",null,"Generates a sample list view for your resources according to the API response. It uses ",(0,a.kt)("inlineCode",{parentName:"p"},"List")," component and from ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-mantine")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook from ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-react-table"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode previewHeight=600px url=http://localhost:3000/samples",live:!0,hideCode:!0,previewHeight:"600px",url:"http://localhost:3000/samples"},'setInitialRoutes(["/"]);\n\n// visible-block-start\nimport { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    MantineProvider,\n    LightTheme,\n    Global,\n} from "@pankod/refine-mantine";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nimport {\n    // highlight-start\n    MantineListInferencer,\n    // highlight-end\n    MantineShowInferencer,\n    MantineCreateInferencer,\n    MantineEditInferencer,\n} from "@pankod/refine-inferencer/mantine";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst App: React.FC = () => {\n    return (\n        <MantineProvider theme={LightTheme} withNormalizeCSS withGlobalStyles>\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(API_URL)}\n                Layout={Layout}\n                resources={[\n                    {\n                        name: "samples",\n                        // highlight-start\n                        list: MantineListInferencer,\n                        // highlight-end\n                        show: MantineShowInferencer,\n                        create: MantineCreateInferencer,\n                        edit: MantineEditInferencer,\n                        canDelete: true,\n                    },\n                    {\n                        name: "categories",\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                    },\n                    {\n                        name: "tags",\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                    },\n                ]}\n            />\n        </MantineProvider>\n    );\n};\n\n// visible-block-end\n\nrender(<App />);\n')),(0,a.kt)("h3",{id:"mantineshowinferencer"},(0,a.kt)("inlineCode",{parentName:"h3"},"MantineShowInferencer")),(0,a.kt)("p",null,"Generates a sample show view for your resources according to the API response. It uses ",(0,a.kt)("inlineCode",{parentName:"p"},"Show")," and field components from ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-mantine")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"useShow")," hook from ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-core"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode previewHeight=600px url=http://localhost:3000/samples/show/123",live:!0,hideCode:!0,previewHeight:"600px",url:"http://localhost:3000/samples/show/123"},'setInitialRoutes(["/samples/show/123"]);\n\n// visible-block-start\nimport { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    MantineProvider,\n    LightTheme,\n    Global,\n} from "@pankod/refine-mantine";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nimport {\n    MantineListInferencer,\n    // highlight-start\n    MantineShowInferencer,\n    // highlight-end\n    MantineCreateInferencer,\n    MantineEditInferencer,\n} from "@pankod/refine-inferencer/mantine";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst App: React.FC = () => {\n    return (\n        <MantineProvider theme={LightTheme} withNormalizeCSS withGlobalStyles>\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(API_URL)}\n                Layout={Layout}\n                resources={[\n                    {\n                        name: "samples",\n                        list: MantineListInferencer,\n                        // highlight-start\n                        show: MantineShowInferencer,\n                        // highlight-end\n                        create: MantineCreateInferencer,\n                        edit: MantineEditInferencer,\n                        canDelete: true,\n                    },\n                    {\n                        name: "categories",\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                    },\n                    {\n                        name: "tags",\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                    },\n                ]}\n            />\n        </MantineProvider>\n    );\n};\n\n// visible-block-end\n\nrender(<App />);\n')),(0,a.kt)("h3",{id:"mantinecreateinferencer"},(0,a.kt)("inlineCode",{parentName:"h3"},"MantineCreateInferencer")),(0,a.kt)("p",null,"Generates a sample create view for your resources according to the first record in list API response. It uses ",(0,a.kt)("inlineCode",{parentName:"p"},"Create")," component and ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook from ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-mantine"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode previewHeight=600px url=http://localhost:3000/samples/create",live:!0,hideCode:!0,previewHeight:"600px",url:"http://localhost:3000/samples/create"},'setInitialRoutes(["/samples/create"]);\n\n// visible-block-start\nimport { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    MantineProvider,\n    LightTheme,\n    Global,\n} from "@pankod/refine-mantine";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nimport {\n    MantineListInferencer,\n    MantineShowInferencer,\n    // highlight-start\n    MantineCreateInferencer,\n    // highlight-end\n    MantineEditInferencer,\n} from "@pankod/refine-inferencer/mantine";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst App: React.FC = () => {\n    return (\n        <MantineProvider theme={LightTheme} withNormalizeCSS withGlobalStyles>\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(API_URL)}\n                Layout={Layout}\n                resources={[\n                    {\n                        name: "samples",\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                        // highlight-start\n                        create: MantineCreateInferencer,\n                        // highlight-end\n                        edit: MantineEditInferencer,\n                        canDelete: true,\n                    },\n                    {\n                        name: "categories",\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                    },\n                    {\n                        name: "tags",\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                    },\n                ]}\n            />\n        </MantineProvider>\n    );\n};\n\n// visible-block-end\n\nrender(<App />);\n')),(0,a.kt)("h3",{id:"mantineeditinferencer"},(0,a.kt)("inlineCode",{parentName:"h3"},"MantineEditInferencer")),(0,a.kt)("p",null,"Generates a sample edit view for your resources according to the API response. It uses ",(0,a.kt)("inlineCode",{parentName:"p"},"Edit")," component and ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook from ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-mantine"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode previewHeight=600px url=http://localhost:3000/samples/edit/123",live:!0,hideCode:!0,previewHeight:"600px",url:"http://localhost:3000/samples/edit/123"},'setInitialRoutes(["/samples/edit/123"]);\n\n// visible-block-start\nimport { Refine } from "@pankod/refine-core";\nimport {\n    Layout,\n    MantineProvider,\n    LightTheme,\n    Global,\n} from "@pankod/refine-mantine";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nimport {\n    MantineListInferencer,\n    MantineShowInferencer,\n    MantineCreateInferencer,\n    // highlight-start\n    MantineEditInferencer,\n    // highlight-end\n} from "@pankod/refine-inferencer/mantine";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst App: React.FC = () => {\n    return (\n        <MantineProvider theme={LightTheme} withNormalizeCSS withGlobalStyles>\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(API_URL)}\n                Layout={Layout}\n                resources={[\n                    {\n                        name: "samples",\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                        create: MantineCreateInferencer,\n                        // highlight-start\n                        edit: MantineEditInferencer,\n                        // highlight-end\n                        canDelete: true,\n                    },\n                    {\n                        name: "categories",\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                    },\n                    {\n                        name: "tags",\n                        list: MantineListInferencer,\n                        show: MantineShowInferencer,\n                    },\n                ]}\n            />\n        </MantineProvider>\n    );\n};\n\n// visible-block-end\n\nrender(<App />);\n')),(0,a.kt)("h2",{id:"live-stackblitz-example"},"Live StackBlitz Example"),(0,a.kt)("p",null,"Below you'll find a Live StackBlitz Example displaying a fully setup ",(0,a.kt)("inlineCode",{parentName:"p"},"Refine")," app with ",(0,a.kt)("inlineCode",{parentName:"p"},"@pankod/refine-inferencer/mantine")," components."),(0,a.kt)("iframe",{loading:"lazy",src:"https://stackblitz.com/github/refinedev/refine/tree/master/examples/inferencer/mantine?embed=1&view=preview&theme=dark&preset=node&ctl=1",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"Refine Inferencer with Mantine UI"}))}u.isMDXComponent=!0}}]);