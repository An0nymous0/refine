"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[19328],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),f=r,m=c["".concat(p,".").concat(f)]||c[f]||u[f]||i;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},96787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={id:"useInfiniteList",title:"useInfiniteList",siderbar_label:"useInfiniteList",description:"useInfiniteList data hook from refine is a modified version of react-query's useInfiniteQuery for retrieving items from a resource with pagination, search, sort, and filter configurations."},o=void 0,s={unversionedId:"api-reference/core/hooks/data/useInfiniteList",id:"api-reference/core/hooks/data/useInfiniteList",title:"useInfiniteList",description:"useInfiniteList data hook from refine is a modified version of react-query's useInfiniteQuery for retrieving items from a resource with pagination, search, sort, and filter configurations.",source:"@site/docs/api-reference/core/hooks/data/useInfiniteList.md",sourceDirName:"api-reference/core/hooks/data",slug:"/api-reference/core/hooks/data/useInfiniteList",permalink:"/docs/api-reference/core/hooks/data/useInfiniteList",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/core/hooks/data/useInfiniteList.md",tags:[],version:"current",lastUpdatedBy:"Y\u0131ld\u0131ray \xdcnl\xfc",lastUpdatedAt:1674482251,formattedLastUpdatedAt:"Jan 23, 2023",frontMatter:{id:"useInfiniteList",title:"useInfiniteList",siderbar_label:"useInfiniteList",description:"useInfiniteList data hook from refine is a modified version of react-query's useInfiniteQuery for retrieving items from a resource with pagination, search, sort, and filter configurations."},sidebar:"someSidebar",previous:{title:"useList",permalink:"/docs/api-reference/core/hooks/data/useList/"},next:{title:"useMany",permalink:"/docs/api-reference/core/hooks/data/useMany"}},p={},l=[{value:"Usage",id:"usage",level:2},{value:"Query Configuration",id:"query-configuration",level:3},{value:"<code>pagination</code>",id:"pagination",level:4},{value:"<code>sort</code>",id:"sort",level:4},{value:"<code>filters</code>",id:"filters",level:4},{value:"API",id:"api",level:2},{value:"Properties",id:"properties",level:3},{value:"Config parameters",id:"config-parameters",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values",level:3},{value:"FAQ",id:"faq",level:2},{value:"How to use cursor based pagination?",id:"how-to-use-cursor-based-pagination",level:3},{value:"How to override the <code>getNextPageParam</code> method?",id:"how-to-override-the-getnextpageparam-method",level:3}],d=(u="PropsTable",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const c={toc:l};function f(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," is a modified version of ",(0,r.kt)("inlineCode",{parentName:"p"},"react-query"),"'s ",(0,r.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/guides/useInfiniteQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"useInfiniteQuery"))," used for retrieving items from a ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," with pagination, sort, and filter configurations. It is ideal for lists where the total number of records is unknown and the user loads the next pages with a button."),(0,r.kt)("p",null,"It uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method as the query function from the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"dataProvider"))," which is passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/categories previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/categories",previewHeight:"420px",hideCode:!0},'import React from "react";\nimport { Refine } from "@pankod/refine-core";\n\nsetInitialRoutes(["/posts"]);\n// visible-block-start\nimport React from "react";\nimport { useInfiniteList } from "@pankod/refine-core";\n\nconst PostList = () => {\n    const {\n        data,\n        error,\n        hasNextPage,\n        isLoading,\n        fetchNextPage,\n        isFetchingNextPage,\n    } = useInfiniteList({\n        resource: "categories",\n        config: {\n            pagination: {\n                pageSize: 4\n            }\n        }\n    });\n\n    if (isLoading) {\n        return <p>Loading</p>;\n    }\n    if (error) {\n        return <p>Something went wrong</p>;\n    }\n\n    return (\n        <div>\n            <ul>\n                {data?.pages.map((page) =>\n                    page.data.map(({ id, title }) => (\n                        <li key={id}>\n                            {id}.{title}\n                        </li>\n                    )),\n                )}\n            </ul>\n\n            {\n                hasNextPage && (\n                    <button\n                        onClick={() => fetchNextPage()}\n                        disabled={isFetchingNextPage}\n                    >\n                        {isFetchingNextPage ? "Loading more..." : "Load More" }\n                    </button>\n                )\n            }\n        </div>\n    );\n}\n// visible-block-end\n\nsetRefineProps({\n    // Layout: (props: LayoutProps) => <Layout {...props} />,\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineHeadlessDemo />);\n')),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Let's assume that we have a ",(0,r.kt)("inlineCode",{parentName:"p"},"posts")," resource with the following data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="https://api.fake-rest.refine.dev/posts"',title:'"https://api.fake-rest.refine.dev/posts"'},'{\n    [\n        {\n            id: 1,\n            title: "E-business",\n            status: "draft",\n        },\n        {\n            id: 2,\n            title: "Virtual Invoice Avon",\n            status: "published",\n        },\n        {\n            id: 3,\n            title: "Powerful Crypto",\n            status: "rejected",\n        },\n    ];\n}\n')),(0,r.kt)("p",null,"First of all, we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," without passing any query configurations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useInfiniteList } from "@pankod/refine-core";\n\ntype IPost = {\n    id: number;\n    title: string;\n    status: "rejected" | "published" | "draft";\n};\n\nconst postInfiniteListResult = useInfiniteList<IPost>({ resource: "posts" });\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="postInfiniteListResult"',title:'"postInfiniteListResult"'},'{\n    "status": "success",\n    "data": {\n        "pages": [\n            {\n                "data": [\n                    {\n                        "id": 1,\n                        "title": "E-business",\n                        "status": "draft"\n                    },\n                    {\n                        "id": 2,\n                        "title": "Virtual Invoice Avon",\n                        "status": "published"\n                    }\n                ],\n                "total": 1370\n            }\n        ]\n    },\n    "hasNextPage": true,\n    "hasPreviousPage": false,\n    "isFetchingNextPage": false,\n    "isFetchingPreviousPage": false\n    ...\n}\n')),(0,r.kt)("p",null,"If your API returns the result like above, you can use useInfiniteList without any configuration."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"getList")," also has default values for pagination:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    pagination: { current: 1, pageSize: 10 }\n}\n"))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you want to create your own ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method, it will automatically implement default query configurations since ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," can work with no configuration parameters.")),(0,r.kt)("h3",{id:"query-configuration"},"Query Configuration"),(0,r.kt)("h4",{id:"pagination"},(0,r.kt)("inlineCode",{parentName:"h4"},"pagination")),(0,r.kt)("p",null,"Allows us to set page and items per page values."),(0,r.kt)("p",null,"For example imagine that we have 1000 post records:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useInfiniteList } from "@pankod/refine-core";\n\nconst postListQueryResult = useInfiniteList({\n    resource: "posts",\n    config: {\n        pagination: { current: 3, pageSize: 8 },\n    },\n});\n')),(0,r.kt)("h4",{id:"sort"},(0,r.kt)("inlineCode",{parentName:"h4"},"sort")),(0,r.kt)("p",null,"Allows us to sort records by the speficified order and field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useInfiniteList } from "@pankod/refine-core";\n\nconst postListQueryResult = useInfiniteList<IPost>({\n    resource: "posts",\n    config: {\n        sort: [{ order: "asc", field: "title" }],\n    },\n});\n')),(0,r.kt)("h4",{id:"filters"},(0,r.kt)("inlineCode",{parentName:"h4"},"filters")),(0,r.kt)("p",null,"Allows us to filter queries using refine's filter operators. It is configured via ",(0,r.kt)("inlineCode",{parentName:"p"},"field"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"operator")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," properites."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#crudfilters"},"Refer to supported operators. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useInfiniteList } from "@pankod/refine-core";\n\nconst postListQueryResult = useInfiniteList<IPost>({\n    resource: "posts",\n    config: {\n        filters: [\n            {\n                field: "status",\n                operator: "eq",\n                value: "rejected",\n            },\n        ],\n    },\n});\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," returns the result of ",(0,r.kt)("inlineCode",{parentName:"p"},"react-query"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteQuery")," which includes many properties such as ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchNextPage"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"hasNextPage")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"isFetchingNextPage"),".  "),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"For example, to disable query from running automatically you can set ",(0,r.kt)("inlineCode",{parentName:"li"},"enabled")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useInfiniteList } from "@pankod/refine-core";\n\nconst postListQueryResult = useInfiniteList<IPost>({\n    resource: "posts",\n    // highlight-start\n    queryOptions: {\n        enabled: false,\n        getNextPageParam: ({ data }) => {\n            const lastRow = data[data.length - 1];\n            return lastRow.id;\n        },\n    },\n    // highlight-end\n});\n')),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useInfiniteQuery"},"Refer to react-query docs for further information. ","\u2192"))),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)(d,{module:"@pankod/refine-core/useInfiniteList","successNotification-default":"`false`","errorNotification-default":'"Error (status code: `statusCode`)"',mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"config-parameters"},"Config parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface UseListConfig {\n    hasPagination?: boolean;\n    pagination?: {\n        current?: number;\n        pageSize?: number;\n    };\n    sort?: Array<{\n        field: string;\n        order: "asc" | "desc";\n    }>;\n    filters?: Array<{\n        field: string;\n        operator: CrudOperators;\n        value: any;\n    }>;\n}\n')),(0,r.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Desription"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data of the query. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TError"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError")))))),(0,r.kt)("h3",{id:"return-values"},"Return values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result of the ",(0,r.kt)("inlineCode",{parentName:"td"},"react-query"),"'s ",(0,r.kt)("inlineCode",{parentName:"td"},"useInfiniteQuery")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useInfiniteQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"InfiniteQueryObserverResult<{"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," data: TData[];"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," total: number; },"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," TError>")))))),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"how-to-use-cursor-based-pagination"},"How to use cursor based pagination?"),(0,r.kt)("p",null,"Some APIs use the ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor-pagination")," method for its benefits. This method uses a ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor")," object to determine the next set of data. The cursor can be a number or a string and is passed to the API as a query parameter."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Preparing the data provider:")),(0,r.kt)("p",null,"Consumes data from data provider ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method. First of all, we need to make the this method in the data provider convenient for this API. The ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor")," data is kept in ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," and should be set to ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"getList: async ({ resource, pagination }) => {\n    const { current } = pagination;\n    const { data } = await axios.get(\n        `https://api.fake-rest.refine.dev/${resource}?cursor=${current || 0}`,\n    );\n\n    return {\n        data: data[resource],\n        total: 0,\n    };\n},\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"As the ",(0,r.kt)("inlineCode",{parentName:"p"},"total")," data is only needed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"offset-pagination")," method, define it as ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," here.")),(0,r.kt)("p",null,"After this process, we have successfully retrieved the first page data. Let's fill the ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor")," object for the next page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"getList: async ({ resource, pagination }) => {\n    const { current } = pagination;\n    const { data } = await axios.get(\n        `https://api.fake-rest.refine.dev/${resource}?cursor=${current || 0}`,\n    );\n\n    return {\n        data: data[resource],\n        total: 0,\n        // highlight-start\n        cursor: {\n            next: data.cursor.next,\n            prev: data.cursor.prev,\n        },\n        // highlight-end\n    };\n},\n")),(0,r.kt)("h3",{id:"how-to-override-the-getnextpageparam-method"},"How to override the ",(0,r.kt)("inlineCode",{parentName:"h3"},"getNextPageParam")," method?"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"refine")," expects you to return the ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor")," object, but is not required. This is because some APIs don't work that way. To fix this problem you need to override the ",(0,r.kt)("inlineCode",{parentName:"p"},"getNextPageParam")," method and return the next ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useInfiniteList } from "@pankod/refine-core";\n\nconst {\n    data,\n    error,\n    hasNextPage,\n    isLoading,\n    fetchNextPage,\n    isFetchingNextPage,\n} = useInfiniteList({\n    resource: "posts",\n    // highlight-start\n    queryOptions: {\n        getNextPageParam: (lastPage, allPages) => {\n            // return the last post\'s id\n            const { data } = lastPage;\n            const lastPost = data[data.length - 1];\n            return lastPost.id;\n        },\n    },\n    // highlight-end\n});\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When you override this method, you can access the ",(0,r.kt)("inlineCode",{parentName:"p"},"lastPage")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"allPages"),".")))}f.isMDXComponent=!0}}]);